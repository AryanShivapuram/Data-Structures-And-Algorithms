class Solution {
private:
    void dfs(int node, vector<vector<int>>& adj, vector<int>& visited, stack<int>& st) {
        if (visited[node] == 1) {
            return;
        }
        visited[node] = 1;
        for (int i = 0; i < adj[node].size(); i++) {
            if (!visited[adj[node][i]]) {
                dfs(adj[node][i], adj, visited, st);
            }
        }
        st.push(node);
    }

public:
    vector<int> topologicalSort(vector<vector<int>>& adj) {
        vector<int> ans;
        vector<int> visited(adj.size(), 0);
        stack<int> st;

        for (int i = 0; i < adj.size(); i++) {
            if (!visited[i]) {
                dfs(i, adj, visited, st);
            }
        }

        while (!st.empty()) {
            ans.push_back(st.top());
            st.pop();
        }

        return ans;
    }
};
